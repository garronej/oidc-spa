# =======================================
# OIDC-SPA Example Environment Variables
# =======================================

# Whether to use the mock implementation instead of connecting
# to an actual OIDC server.
VITE_OIDC_USE_MOCK=false

# By default, the example uses **Keycloak**.
# You can comment out the Keycloak section and uncomment
# another provider below to test other integrations.


# ======= Keycloak ======================
VITE_OIDC_ISSUER_URI=https://cloud-iam.oidc-spa.dev/realms/oidc-spa
VITE_OIDC_CLIENT_ID=example-tanstack-start

# ======= Auth0 =========================
# Required changes in src/oidc.ts:
#   - In bootstrapOidc, add the following along with issuerUri and clientId:
#       - extraQueryParams: { audience: import.meta.env.VITE_OIDC_AUDIENCE }
#       - idleSessionLifetimeInSeconds: parseInt(import.meta.env.VITE_OIDC_SSO_SESSION_IDLE_SECONDS)
#
# idleSessionLifetimeInSeconds is used here because the test Auth0 account
# is configured to expire sessions after 2 minutes of inactivity (for testing auto-logout).
# Auth0 does not communicate this TTL, so we must hardcode it even though it’s not the source of truth.
#
# More details: https://docs.oidc-spa.dev/providers-configuration/auth0
#
#VITE_OIDC_ISSUER_URI=https://auth0.oidc-spa.dev
#VITE_OIDC_CLIENT_ID=DkoDtyQkYj4UPk3gKk4MjtnD9nskUhpt
#VITE_OIDC_AUDIENCE=https://oidc-spa-example
#VITE_OIDC_SSO_SESSION_IDLE_SECONDS=120

# ======= Google OAuth ==================
# Required changes in src/oidc.ts:
#   - In bootstrapOidc, add the following along with issuerUri and clientId:
#       - __unsafe_clientSecret: import.meta.env.VITE_OIDC_CLIENT_SECRET
#         (Note: this is not actually a secret, it’s just a Google OAuth quirk.)
#       - __unsafe_useIdTokenAsAccessToken: true
#         (Note: This is only until oidc-spa feature a token introspection support)
#
#  Note that with Google, the website will need a full page reload every hour.
#  Also note that the profile picture usually cannot be fetched from the frontend.
#  use a server function to get it's content.
#
# More details: https://docs.oidc-spa.dev/providers-configuration/google-oauth
#
#VITE_OIDC_ISSUER_URI=https://accounts.google.com
#VITE_OIDC_CLIENT_ID=928024164279-ifjvmsffi64slkk81h3gmoh7p03ev68k.apps.googleusercontent.com
#VITE_OIDC_CLIENT_SECRET=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

# ======= Microsoft Entra ID =======
# Required changes in src/oidc.ts:
#   - In bootstrapOidc, add the following along with issuerUri and clientId:
#       - scopes: ["profile", `${import.meta.env.VITE_OIDC_API_URI}/${import.meta.env.VITE_OIDC_SCOPE_FOR_API}`],
#
# NOTE: Unfortunately, this demo EntraID organization is set to only allow "Accounts in this organization".
#       You cannot signin with your personal account.
#
# More details: https://docs.oidc-spa.dev/providers-configuration/microsoft-entra-id
#
#VITE_OIDC_ISSUER_URI=https://login.microsoftonline.com/71a0a621-363a-4182-8209-86364aa6de03/v2.0
#VITE_OIDC_CLIENT_ID=3c8f72b4-4dd9-4aa2-a01d-43349ba90394
#VITE_OIDC_API_URI=api://example-multi-providers
#VITE_OIDC_SCOPE_FOR_API=access_as_user


# =======================================
# Optional: Upstash Redis (persistent todos)
# =======================================
# Vercel’s filesystem is read-only, so we use a hosted KV store.
# See: https://upstash.com/
#
#KV_REST_API_URL=
#KV_REST_API_TOKEN=