
# Pick one of the following configurations, those are not mock credentials, you can use them for testing purposes.  

OIDC_USE_MOCK=false

# ======= Keycloak =================
# By default we use keycloak but you can commend those envs and uncomment
# the one of another auth server to test.
OIDC_ISSUER_URI=https://cloud-iam.oidc-spa.dev/realms/oidc-spa
OIDC_CLIENT_ID=example-tanstack-start

# ======= Google OAuth =============
# To test with Google you need to make a few changes to the code:
# - src/oidc.ts: 
#    - You need to set `expectedAudience: ({ paramsOfBootstrap })=> paramsOfBootstrap.clientId`
#    - bootstrapOidc: You must provide the following two parameter alongside issuerUri and clientId:
#        - `__unsafe_clientSecret: process.OIDC_CLIENT_SECRET`
#        - `__unsafe_useIdTokenAsAccessToken: true`
# 
# More details: https://docs.oidc-spa.dev/providers-configuration/google-oauth
#OIDC_ISSUER_URI=https://accounts.google.com
#OIDC_CLIENT_ID=928024164279-ifjvmsffi64slkk81h3gmoh7p03ev68k.apps.googleusercontent.com
#OIDC_CLIENT_SECRET=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 # NOTE: Not actually a secret, just a Google quirk that requires a secret to be provided even for public client...















# === Optional Upstash Redis (enables persistent todos) ======
# This is because we can't use node:fs on vercel, we need a kv store
# See: https://upstash.com/
KV_REST_API_URL=
KV_REST_API_TOKEN=

